{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/Contact/Contact.module.scss","App.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm .js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","state","name","number","onSubmitHandler","event","preventDefault","props","getContact","id","uuidv4","setState","onChangeInputHandler","currentTarget","value","className","s","onSubmit","this","ContactForm__title","ContactForm__input","type","onChange","ContactForm__btn","Component","Contact","contact","deleteContact","listItem","btn","onClick","ContactList","contacts","length","list","map","protoTypes","PropTypes","objectOf","shape","string","func","Filter","filter","filterHandler","container","App","newContact","find","alert","addContactToLocalstorage","prevState","contactsFromLocalstorage","localStorage","getItem","setItem","JSON","stringify","parse","getFilteredContacts","toLowerCase","includes","newContactList","filteredContacts","AppContainer","contacts__title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.387000d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__tQQCA\",\"ContactForm__title\":\"ContactForm_ContactForm__title__1gULz\",\"ContactForm__input\":\"ContactForm_ContactForm__input__6xsxF\",\"ContactForm__btn\":\"ContactForm_ContactForm__btn__uzhrl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"Contact_listItem__1Tcm0\",\"name\":\"Contact_name__1ti6B\",\"btn\":\"Contact_btn__17PP8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"App_AppContainer__3nOiP\",\"contacts__title\":\"App_contacts__title__15GsC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3S5iK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__kv2wC\"};","import PropTypes from 'prop-types';\n\nimport React, { Component } from 'react';\nimport s from './ContactForm.module.scss';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  onSubmitHandler = event => {\n    event.preventDefault();\n\n    const { name, number } = this.state;\n\n    if (name && number) {\n      this.props.getContact({\n        id: uuidv4(),\n        name,\n        number,\n      });\n    }\n\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  onChangeInputHandler = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    return (\n      <div className={s.ContactForm}>\n        <form onSubmit={this.onSubmitHandler}>\n          <label>\n            <span className={s.ContactForm__title}>Name</span>\n            <input\n              className={s.ContactForm__input}\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.onChangeInputHandler}\n            />\n          </label>\n          <label>\n            <span className={s.ContactForm__title}>Phone</span>\n            <input\n              className={s.ContactForm__input}\n              type=\"text\"\n              name=\"number\"\n              value={this.state.number}\n              onChange={this.onChangeInputHandler}\n            />\n          </label>\n          <button className={s.ContactForm__btn} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  getContact: PropTypes.func,\n  onSubmitHandler: PropTypes.func,\n  onChangeInputHandler: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport s from './Contact.module.scss';\n\nconst Contact = ({ contact, deleteContact }) => {\n  return (\n    <li className={s.listItem}>\n      <span className={s.name}>{contact.name}: </span>\n      <span className={s.number}>{contact.number}</span>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => deleteContact(contact.id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  contact: PropTypes.object,\n  deleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nimport React from 'react';\nimport Contact from '../Contact';\n\nimport s from './ContactList.module.scss';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n \n  if(contacts.length > 0){\n    return (\n      <ul className={s.list}>\n        {contacts.map(contact => (\n          <Contact\n            contact={contact}\n            deleteContact={deleteContact}\n            key={contact.id}\n          />\n        ))}\n      </ul>\n    );\n  }else{\n    return(\n      <h2>There is no contacts</h2>\n    )\n  }\n};\n\nexport default ContactList;\n\nContactList.protoTypes = {\n  contacts: PropTypes.objectOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  deleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport s from './Filter.module.scss';\n\nconst Filter = ({ filter, filterHandler }) => {\n  return (\n    <div className={s.container}>\n      <h3>Find contacts by name</h3>\n      <input name=\"filter\" value={filter} onChange={filterHandler} />\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.protoTypes = {\n  filter: PropTypes.string,\n  filterHandler: PropTypes.func,\n};\n","import s from './App.module.scss';\nimport { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm ';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: null || [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contactsFromLocalstorage = localStorage.getItem('contacts');\n    this.setState({\n      contacts: [...JSON.parse(contactsFromLocalstorage) ?? []]\n    })\n  }\n\n  getContact = newContact => {\n    if (this.state.contacts) {\n      const res = this.state.contacts.find(\n        contact => contact.name === newContact.name,\n      );\n      if (res) {\n        alert(`${newContact.name} is already in contacts`);\n        return;\n      }\n    }\n\n    this.addContactToLocalstorage(newContact);\n\n    this.setState(prevState => ({\n      contacts: [newContact, ...(prevState.contacts ?? [])],\n    }));\n  };\n\n  addContactToLocalstorage = contact => {\n    const contactsFromLocalstorage = localStorage.getItem('contacts');\n    localStorage.setItem(\n      'contacts',\n      JSON.stringify([\n        contact,\n        ...(JSON.parse(contactsFromLocalstorage) ?? []),\n      ]),\n    );\n  };\n\n  filterHandler = event => {\n    const { value } = event.currentTarget;\n    this.setState({\n      filter: value,\n    });\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    if (filter) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()),\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  deleteContact = id => {\n    const contactsFromLocalstorage = localStorage.getItem('contacts')\n    const newContactList = JSON.parse(contactsFromLocalstorage).filter(contact => contact.id !== id)\n    localStorage.setItem('contacts', JSON.stringify(newContactList))\n\n    this.setState({\n      contacts: newContactList\n    })\n  };\n\n  render() {\n    // console.log(this.state);\n    const filteredContacts = this.getFilteredContacts();\n    return (\n      <div className={s.AppContainer}>\n        <h1>Phonebook</h1>\n        <ContactForm getContact={this.getContact} />\n        <h2 className={s.contacts__title}>Contacts</h2>\n        <Filter filterHandler={this.filterHandler} />\n        <ContactList\n          contacts={filteredContacts}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//https://github.com/goitacademy/react-homework/tree/master/homework-02/phonebook\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}